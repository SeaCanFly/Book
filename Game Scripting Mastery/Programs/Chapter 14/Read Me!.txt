CHAPTER 14 NOTES
-----------------------------------------------------------------------------------------------

	In chapter 14, we design and implement an entire compiler framework for XtremeScript.
	Combining the lexical analyzer we developed in the last chapter with a number of
	important components like an I-code module and code emitter, we've created a shell of a
	program that's only a parser away from being a complete compiler!
	
	If you can't wait until we complete the parser in the next chapter to see it running,
	however (and I can't blame you), check out the source included. It's the full compiler
	framework developed in the book, along with code for hardcoding a script directly into
	the I-code module and symbol and function tables. This allows us to test the I-code
	and back end of the compiler, and even create both an .XASM output file and an .XSE
	executable.
	
	The compiler is simply a console application, so after you've got the source files
	loaded and organized in your IDE, you should have no trouble compiling it. For MSVC++
	users, I've included both the workspace and project files to get you up and running as
	fast as possible. Once you can compile the existing compiler framework, try hardcoding
	your own mini-scripts!
	
GENERAL PROGRAM NOTES
-----------------------------------------------------------------------------------------------

	Each project, example or demo in the book comes in both source code form and executable
	form. All of the book's source was compiled with Microsoft Visual C++ 6.0, so the
	project (.DSP) and workspace (.DSW) files are included as well. Source code is always
	found in the Source/ directory, and executables are always found under Executable/.
	
	It's always a good idea to make a copy of the source on your hard drive. This can be
	done by simply dragging its directory to the destination of your choice. I suggest
	copying the entire Programs/ directory into a safe place on your hard drive, so you'll
	have the entire book's content available at all times.

	Any program that uses graphics or sound is written with my Wrappuh library, which wraps
	the functionality of the Win32 API and DirectX. This is done to save you the trouble of
	sifting through pages of DX/Win32-specific code, but you still have to configure your
	compiler properly in order to compile Wrappuh programs. Specifically, MAKE SURE of the
	following:

		- wrappuh.cpp, wrappuh.h and keymap.h are included in your project.
		- The DirectX export libraries (.LIB) are included with your project
		- Your compiler's path settings include the path to the DirectX SDK.
		- Your version of DirectX is up to date; I recommend 8.1 (the latest at the
		  time of this writing). As a general rule of thumb, install the version
		  included on the CD (unless you already have a more recent one).

	Remember, Wrappuh hides the details of Windows and DirectX, but it doesn't port
	anything. Demos that use graphics and sound will still require a Win32/DX platform to
	run properly.
	
	NOTE: Not all chapters require the Wrappuh library as many example programs are text-
	      based console applications. The above directions ONLY apply to graphical
	      programs, which will be clearly marked in the first section of this document. If
	      an example program is a console application, it will NOT require DirectX or the
	      Wrappuh API, and can be compiled normally. These programs will also most likely
	      compile in non-MSVC++ compilers or even alternate platforms, unless otherwise
	      noted, although I can't make any guarantees.

-----------------------------------------------------------------------------------------------

Have fun!

-- Alex
   alex@amvbooks.com